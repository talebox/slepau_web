// All variables that the styles
// ONLY GLOBAL VARIABLES
// @use 'sass:map';

@use 'sass:list';
@import './utils/type_check';
@import './utils/utils';

$debug: true;

// ######## COLORS ############
$theme-default: default;
$theme-current: $theme-default;
@function theme-selector($prefix: '.', $suffix: '') {
	@return if($theme-current == '', '', if($prefix, $prefix, '') + $theme-current + if($suffix, $suffix, ''));
}

// #de5395
// #5a53a7

$themes: (
	default: (
		colors: (
			primary: #238dea,
			secondary: #27af49,
			warn: #d2b42d,
			error: #b93737,
			background: #f8f8f8,
			separator: rgba(#000, 0.2),
			neutral: rgb(127, 127, 127),
			disabled: rgb(101, 101, 101),
		),
		shades: (
			default: 0,
			hover: -1,
			active: -2,
			disabled: -3,
		),
		shadows: (
			default: 0 0 5px 0 rgba(0, 0, 0, 0.2),
			small: 0 0 10px 0 rgba(0, 0, 0, 0.2),
			large: 0 0 15px 0 rgba(0, 0, 0, 0.2),
		),
		alphas: (
			default: 0.8,
		),
		spaces: (
			0em,
			0.3em,
		),
		font-sizes: (
			0.7em,
			1em,
			1.5em,
			2em,
		),
		font-size-defaults: (
			html: 1em,
			h1: 4,
			h2: 3,
			h3: 2,
		),
	),
	// ? All dark theme changes is background color
	dark:
		(
			colors: (
				background: rgb(41, 41, 41),
			),
		),
);
// Apply overrides from local globals file
@if variable-exists(themes-override) {
	$themes: map-merge-deep($themes, $themes-override);
}
$theme-names: map-keys(
	$map: $themes,
);
$theme-names-with-empty: list.join('', $theme-names);

// Apply all transformations to the themes defined
@each $theme-name, $theme in $themes {
	@each $field, $value in $theme {
		// APPLY TRANSAFORMATIONS
		@if $field == spaces {
			@for $v from 2 through 9 {
				$value: append($value, nth($value, -1) * 1.6);
			}
		}
		// ######################

		//  Merge field in theme
		$theme: map-merge($theme, (#{$field}: $value));
	}
	// Any values we might add to each theme
	$theme: map-merge(
		$theme,
		(
			// color-names: map-keys(map-get($theme, colors)),
			color-names:
				(primary, background, secondary, error, warn, neutral)
		)
	);

	// Put missing fields from default in all others
	@if $theme-name != $theme-default {
		$theme: map-merge-deep(map-get($themes, $theme-default), $theme);
	}

	//  Merge theme in themes
	$themes: map-merge($themes, (#{$theme-name}: $theme));
}

// ######## FONTS #############

// Can be used to get current theme/field/field/field
@function get-theme-field($field-names...) {
	$theme: null;
	// Trying to get a valid theme from where to get the value
	@if not map-has-key($map: $themes, $key: $theme-current) {
		// @warn "Theme `#{$theme-current}` doesnt exist in themes, taking default theme";
		@if not map-has-key($map: $themes, $key: $theme-default) {
			@error "Default theme `#{$theme-default}` doesn't exist in themes";
		}
		$theme: map-get($themes, $theme-default);
	} @else {
		$theme: map-get($themes, $theme-current);
	}

	// Make sure field-names is valid
	@if (not $field-names) or (length($field-names) == 0) {
		@return $theme;
	}
	// If the first value of field-names is arglist or list, then make that the field-names
	@if length($field-names) == 1 {
		$t: type-of(nth($field-names, 1));
		@if $t == 'arglist' or $t == 'list' {
			$field-names: nth($field-names, 1);
		}
	}

	// Just recurse/pull the value from the theme and return it
	$out: map-recurse($theme, $field-names);
	// @debug "get-theme-field called with `#{$field-names}`, outputting `#{debug-list($out)}`";
	@return $out;
}
// Allows to set a default value if the value requested wasn't found in the theme
@function get-theme-field-or-return($default, $field-names...) {
	$tf: get-theme-field($field-names);
	@return if(is-falsy($tf), $default, $tf);
}

// Helper function to get a shade
@function get-shade($shade) {
	$val: get-theme-field(shades, $shade);
	@return if($val, $val, $shade);
}

// @function media-query($size, $type: max-width) {
// 	$size: get-theme-field-or-return($size, media, $size);
// 	@return "@media(#{$type}: #{$size})";
// }

// Theme iterator
@mixin use-theme($prefix: '.', $suffix: '') {
	@each $theme-name, $theme in $themes {
		$theme-current: $theme-name !global;
		$ts: theme-selector($prefix, $suffix);
		@content ($ts);
	}
	$theme-current: $theme-default !global;
}
@mixin use-theme-with-default($prefix: '.', $suffix: '') {
	@content (null);
	@each $theme-name, $theme in $themes {
		$theme-current: $theme-name !global;
		$ts: theme-selector($prefix, $suffix);
		@content ($ts);
	}
	$theme-current: $theme-default !global;
}
// Color iterator
@mixin use-color {
	@each $color-name in get-theme-field(color-names) {
		$color: get-color($color-name);
		@content ($color-name, $color);
	}
}

@import './01-config/space';
@import './01-config/colors';
@import './01-config/typography';
@import './01-config/material-palette';
